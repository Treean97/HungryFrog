name: UnityBuildAndDeploy

# ① 태그 푸시와 수동 실행 둘 다 대응
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  UNITY_VERSION: 6000.0.47f1
  PACKAGE_NAME: com.MobileGame.HungryFrog
  PLAY_TRACK: internal

jobs:
  buildForAndroid:
    runs-on: [self-hosted, linux]

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # ② 태그 이름에서 VERSION, VERSION_CODE 추출
      - name: Extract version from tag
        if: startsWith(github.ref, 'refs/tags/')
        id: extract
        run: |
          # refs/tags/v1.2.3 → v1.2.3
          TAG="${GITHUB_REF#refs/tags/}"
          # v 제거 → 1.2.3
          VER="${TAG#v}"
          echo "VERSION=${VER}" >> $GITHUB_ENV

          # 예) 1.2.3 → 1*10000 + 2*100 + 3 = 10203
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VER"
          CODE=$(( MAJOR * 10000 + MINOR * 100 + PATCH ))
          echo "VERSION_CODE=${CODE}" >> $GITHUB_ENV

      # ③ ProjectSettings.asset 치환
      - name: Update Unity PlayerSettings version
        if: env.VERSION != ''
        run: |
          sed -i "s/^  bundleVersion: .*/  bundleVersion: \"$VERSION\"/" ProjectSettings/ProjectSettings.asset
          sed -i "s/^  androidBundleVersionCode: .*/  androidBundleVersionCode: ${VERSION_CODE}/" ProjectSettings/ProjectSettings.asset

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**','Packages/**','ProjectSettings/**') }}
          restore-keys: Library-

      - name: Unity Build
        id: build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE:   ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:     ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD:  ${{ secrets.UNITY_PASSWORD }}
        with:
          version:            ${{ env.UNITY_VERSION }}
          targetPlatform:     Android
          androidExportType:  androidAppBundle
          androidKeystoreName:   user.keystore
          androidKeystoreBase64: ${{ secrets.KEYSTORE_BASE64 }}
          androidKeystorePass:   ${{ secrets.KEYSTORE_PASSWORD }}
          androidKeyaliasName:   ${{ secrets.KEY_ALIAS }}
          androidKeyaliasPass:   ${{ secrets.KEY_PASSWORD }}

      - name: Upload AAB as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: game-aab
          path: build/**/*.aab

  deployToPlayStore:
    needs: buildForAndroid
    runs-on: ubuntu-latest

    steps:
      - name: Download AAB
        uses: actions/download-artifact@v4
        with:
          name: game-aab
          path: ./release

      - name: Publish to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName:     ${{ env.PACKAGE_NAME }}
          track:           ${{ env.PLAY_TRACK }}
          releaseFiles:    release/**/*.aab
